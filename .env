#=============================================================================
# .env : docker-compose default environment
#
# Compose supports declaring default environment variables in a "dot-env" file
# that's placed in the DIR where docker-compose is to be executed. Docker uses
# these VARS for shell-style VAR substitution within 'docker-compose.yml'.
#
# USER-MODIFIED IMAGE BUILDER ENVIRONMENT VARIABLES
#
# This project uses the .env file to declare OpenWrt's Image Builder variables
# that get passed to the 'make image' command line in docker-compose.yml.
#
# http://openwrt.org/docs/guide-user/additional-software/imagebuilder
#=============================================================================

#-----------------------------------------------------------------------------
# CHOOSE OPENWRT IMAGE BUILDER (PRE-COMPILED C
#
# These VARS define which version of the ImageBuilder to pull from Docker Hub.
# 	e.g: "openwrt/imagebuilder:${TARGET}-${SUBTARGET}-${RELEASE}"
#
# List of OpenWrt targets is online at:
# 	https://openwrt.org/docs/techref/targets/start
#-----------------------------------------------------------------------------

# Specifies the OpenWrt target (SoC model)
# 	e.g: "imx6"
# 	e.g: "mediatek"
TARGET="bcm53xx"

# Specifies the OpenWrt subtarget (CPU architecture)
# 	e.g: "generic"
# 	e.g: "mt7622"
SUBTARGET="generic"

# Specifies the OpenWrt release to build (version number)
# 	e.g: RELEASE="21.02.3"
# 	e.g: RELEASE="22.03-SNAPSHOT"
RELEASE="23.05-SNAPSHOT"

#------------------------------------------------------------------------------
# 						-- Building OpenWrt Images --
#
# In the openwrt/imagebuilder Docker container, a 'make image' command will
# create a new firmware image with the default target profile and package set.
# You can use the following parameters to change that:
#-------------------------------------------------------------------------------

# Specifies the OpenWrt target image to build (e.g: netgear_r8000).
PROFILE="netgear_r8000"

# A list of packages to embed into the image. (Official release adds 'luci')
# Best practice is only those needed to go online then rest upon first-boot.
# Enter a space-delimited list; can use '-' prefix to remove any base packages.
#
# 	e.g: for 22.03.x
#PACKAGES="luci dmesg luci-app-wireguard qrencode kmod-usb-net kmod-usb-net-cdc-ether kmod-mii usb-modeswitch usbutils"
#
# 	e.g: for 23.05.x
PACKAGES="-ppp -ppp-mod-pppoe -luci-proto-ppp luci luci-proto-wireguard wireguard-tools kmod-wireguard luci-proto-modemmanager kmod-usb-net kmod-usb-net-cdc-ether kmod-usb-net-cdc-mbim kmod-usb-net-cdc-ncm kmod-usb-net-qmi-wwan kmod-usb-serial kmod-usb-serial-option kmod-usb-serial-qualcomm kmod-usb-serial-wwan kmod-usb-wdm usb-modeswitch usbutils -dnsmasq -odhcpd-ipv6only odhcpd luci-app-unbound unbound-control unbound-anchor luci-app-adblock"

# Include all extra files from DIR into the new firmware image (merge DIR tree).
# Enter absolute path of the DIR (inside docker image).
#
FILES="/home/build/files"

# Alternative output directory for the images being built.
# Enter absolute path of the DIR (inside docker image).
#
BIN_DIR="/home/build/openwrt/bin"

# Suffix to append to the output image filename (sanitized).
# Enter a string excluding the dash '-'; it's added automatically after VERSION.
#
EXTRA_IMAGE_NAME=""

# Services in /etc/init.d/ to disable by default.
# Enter a space-delimited list of service names from /etc/init.d/
#
DISABLE_SERVICES=""

# Store locally generated signing key in the built image(s)?
# Enter numeric boolean (1 for TRUE; 2 for FALSE)
#
ADD_LOCAL_KEY=0

